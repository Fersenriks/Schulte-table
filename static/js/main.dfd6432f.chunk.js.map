{"version":3,"sources":["img/cat.jpg","numberItems.js","components/Game/Game.jsx","components/Find/Find.jsx","components/Modal/Modal.jsx","components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","numberItems","i","length","j","Math","floor","random","Game","selectItem","setSelectItem","map","n","key","id","onClick","Find","className","Modal","restartGame","React","useState","cat","setCat","src","require","alt","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kNAAAA,EAAOC,QAAU,IAA0B,iC,oCCa3C,I,kDAXMC,EACJ,CACE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACrB,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC3B,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5B,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5B,GAAI,GAAI,GAAI,IAKPC,EAAID,EAAYE,OAAS,EAAGD,EAAI,EAAGA,IAAK,CAC/C,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADO,EAEZ,CAACD,EAAYG,GAAIH,EAAYC,IAA/DD,EAAYC,GAFkC,KAE9BD,EAAYG,GAFkB,KAOlCH,QCJAO,EAdF,SAAC,GAA8C,IAA7CP,EAA4C,EAA5CA,YAAaQ,EAA+B,EAA/BA,WAAYC,EAAmB,EAAnBA,cAEpC,OACI,4BACKT,EAAYU,KACT,SAAAC,GAAC,OAAI,wBACDC,IAAOZ,EAAYa,GACnBC,QAAS,kBAAOH,IAAMH,EAAcC,EAAcD,EAAa,GAAK,KACvEG,QCFFI,EANF,SAAC,GAAkB,IAAjBP,EAAgB,EAAhBA,WACX,OACI,0BAAMQ,UAAU,aAAhB,SAAmCR,IC+B5BS,G,YA/BD,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAAkB,EAETC,IAAMC,UAAS,GAFN,mBAExBC,EAFwB,KAEnBC,EAFmB,KAI/B,OACI,yBAAKN,UAAU,SAEPK,EAEQ,oCACI,mCACA,yBACIP,QAAS,kBAAMQ,GAAQD,IACvBE,IAAKC,EAAQ,IAAsBC,IAAI,SAG/C,oCACI,+MACA,6BACI,4BAAQT,UAAU,UAAUF,QAAS,kBAAMI,MAA3C,2FACA,4BAAQF,UAAU,UAAUF,QAAS,kBAAMQ,GAAQD,KAAnD,8HCmBjBK,MAjCf,WAEE,IAFa,EAUuBP,IAAMC,SAAS,GAVtC,mBAUNZ,EAVM,KAUMC,EAVN,KAYb,OACE,yBAAKO,UAAU,OAEI,KAAfR,EAAoB,kBAAC,EAAD,CAAOU,YAbf,WAChB,IAAK,IAAIjB,EAAID,EAAYE,OAAS,EAAGD,EAAI,EAAGA,IAAK,CAC/C,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADO,EAEZ,CAACD,EAAYG,GAAIH,EAAYC,IAA/DD,EAAYC,GAFkC,KAE9BD,EAAYG,GAFkB,KAIjDM,EAAc,MAUN,oCACE,yBAAKO,UAAU,QACb,kBAAC,EAAD,CAAMR,WAAYA,KAEpB,kBAAC,EAAD,CACER,YAAaA,EACbQ,WAAYA,EACZC,cAAeA,OCtBXkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.dfd6432f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cat.e0cc50d0.jpg\";","//array of numbers 1-36\r\n\r\nconst numberItems =\r\n  [\r\n    1, 2, 3, 4, 5, 6, 7, 8,\r\n    9, 10, 11, 12, 13, 14, 15, 16,\r\n    17, 18, 19, 20, 21, 22, 23, 24,\r\n    25, 26, 27, 28, 29, 30, 31, 32,\r\n    33, 34, 35, 36\r\n  ];\r\n\r\n//random sorting an array\r\n\r\nfor (let i = numberItems.length - 1; i > 0; i--) {\r\n  let j = Math.floor(Math.random() * (i + 1));\r\n  [numberItems[i], numberItems[j]] = [numberItems[j], numberItems[i]];\r\n}\r\n\r\n\r\n\r\nexport default numberItems;","import React from 'react';\r\n\r\nconst Game = ({numberItems, selectItem, setSelectItem}) => {\r\n    \r\n    return (\r\n        <ul>\r\n            {numberItems.map( \r\n                n => <li\r\n                    key = {numberItems.id} \r\n                    onClick={() => (n === selectItem) ? setSelectItem(selectItem + 1) : ''}>\r\n                {n}</li> \r\n            )}\r\n        </ul>\r\n    );\r\n}\r\n\r\nexport default Game;","import React from 'react';\r\n\r\nconst Find = ({selectItem}) => {\r\n    return(\r\n        <span className=\"info-next\">Find: {selectItem}</span>\r\n    )\r\n}\r\n\r\nexport default Find;","import React from 'react'\r\n\r\nimport './Modal.css'\r\n\r\nconst Modal = ({ restartGame }) => {\r\n\r\n    const [cat, setCat] = React.useState(false);\r\n\r\n    return (\r\n        <div className='modal'>\r\n            {\r\n                cat ?\r\n                    (\r\n                        <>\r\n                            <h1>CAT</h1>\r\n                            <img\r\n                                onClick={() => setCat(!cat)}\r\n                                src={require('../../img/cat.jpg')} alt='Cat' />\r\n                        </>\r\n                    ) : (\r\n                        <>\r\n                            <h1>Вы победили! Не хотите сыграть еще?</h1>\r\n                            <div>\r\n                                <button className='control' onClick={() => restartGame()}>Хочу сыграть еще!</button>\r\n                                <button className='control' onClick={() => setCat(!cat)}>Покажите лучше котика!</button>\r\n                            </div>\r\n                        </>\r\n                    )\r\n            }\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Modal;","import React from 'react';\r\n\r\nimport numberItems from '../../numberItems'\r\n\r\nimport Game from '../Game/Game'\r\nimport Find from '../Find/Find'\r\n\r\nimport './App.css';\r\nimport Modal from '../Modal/Modal';\r\n\r\nfunction App() {\r\n  \r\n  let restartGame = () =>{\r\n    for (let i = numberItems.length - 1; i > 0; i--) {\r\n      let j = Math.floor(Math.random() * (i + 1));\r\n      [numberItems[i], numberItems[j]] = [numberItems[j], numberItems[i]];\r\n    }\r\n    setSelectItem(1)\r\n  }\r\n\r\n  const [selectItem, setSelectItem] = React.useState(1);\r\n  \r\n  return (\r\n    <div className=\"App\">\r\n      {\r\n        selectItem === 37 ? <Modal restartGame={restartGame}/> :\r\n          (\r\n            <>\r\n              <div className=\"info\">\r\n                <Find selectItem={selectItem} />\r\n              </div>\r\n              <Game\r\n                numberItems={numberItems}\r\n                selectItem={selectItem}\r\n                setSelectItem={setSelectItem}\r\n              />\r\n            </>\r\n          )\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './index.css';\r\n\r\nimport App from './components/App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}